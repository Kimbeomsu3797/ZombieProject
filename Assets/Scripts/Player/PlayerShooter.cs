using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerShooter : MonoBehaviour
{
    public Gun gun; // 사용할 총
    public Transform gunPivot; // 총 배치의 기준점
    public Transform leftHandMount; // 총의 왼쪽 손잡이, 왼손이 위치할 지점
    public Transform rightHandMount; //총의 오른쪽 손잡이, 오른손이 위치할 지점

    private PlayerInput playerInput; // 플레이어의 입력
    private Animator playerAnimator; // 애니메이터 컴포넌트
    // Start is called before the first frame update
    void Start()
    {
        //컴포넌트 가져오기
        playerInput = GetComponent<PlayerInput>();
        playerAnimator = GetComponent<Animator>();
    }
    private void OnEnable()
    {
        //슈터가 활성화 될 때 총도 함께 활성화
        gun.gameObject.SetActive(true);
    }

    private void OnDisable()
    {
        // 슈터가 비활성화 될 때 총도 함께 비활성화
        gun.gameObject.SetActive(false);
    }
    // Update is called once per frame
    void Update()
    {
        // 입력을 감지하고 총을 발사하거나 재장전
        if(playerInput.fire)// fire = input.getbutton(fireButtonName);
        {
            // 발사 입력 감지시 총 발사
            gun.Fire();
        }
        else if (playerInput.reload)
        {
            if (gun.Reload())
            {
                //재장전 성공시에만 재장전 애니메이션 재생
                playerAnimator.SetTrigger("Reload");
            }
        }
        //남은 탄약 UI를 갱신
        UpdateUI();
    }

    //탄약 UI 갱신
    private void UpdateUI()
    {
        if(gun != null )//&& UIManager.instance != null) //UIManager 구현전
        {
            // UI 매니저의 탄약 ㅌ텍스트에 탄창의 탄약과 남은 전체 탄약을 표시
            //UIManager.instance.UpdateAmmoText(gun.magAmmo, gun.ammoRemain);

            /*
            //탄약 텍스트 갱신
            public void UpdateAmmoText(int magAmmo, int remainAmmo)
            {
            ammoText.text = magAmmo + "/" + remainAmmo;
            */
        }
    }

    private void OnAnimatorIK(int layerIndex)
    {
        //총의 기준점 gunPivot을 3D 모델의 오른쪽 팔꿈치 위치로 이동
        gunPivot.position = playerAnimator.GetIKHintPosition(AvatarIKHint.RightElbow);


        //IK를 사용하여 왼손의 위치와 회전을 총의 왼손 손잡이에 맞춘다.
        playerAnimator.SetIKPositionWeight(AvatarIKGoal.LeftHand, 1.0F);
        playerAnimator.SetIKRotationWeight(AvatarIKGoal.LeftHand, 1.0F);

        playerAnimator.SetIKPosition(AvatarIKGoal.LeftHand, leftHandMount.position);
        playerAnimator.SetIKRotation(AvatarIKGoal.LeftHand, leftHandMount.rotation);

        //IK를 사용하여 오른손의 위치와 회전을 총의 오른쪽 손잡이에 맞춘다.
        playerAnimator.SetIKPositionWeight(AvatarIKGoal.RightHand, 1.0F);
        playerAnimator.SetIKRotationWeight(AvatarIKGoal.RightHand, 1.0F);

        playerAnimator.SetIKPosition(AvatarIKGoal.RightHand, rightHandMount.position);
        playerAnimator.SetIKRotation(AvatarIKGoal.RightHand, rightHandMount.rotation);
    }
}
